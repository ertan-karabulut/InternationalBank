@layout LoginLayout
@page "/PasswordChange/{CodeId}/{CodeCustomerNumber}"
@inject IServiceOperations operation
@inject ILocalStorageService local
@inject NavigationManager navigation
@inject IJSRuntime _jSRuntime

<SuccessModalComponent Message="Şifreniz başarıyla değiştirilmiştir." Id="successPasswordModal" ApprovalOnPress=@(()=> navigation.NavigateTo("/")) />

<InformationModalComponent Message=@validationMessage Title="Bilgilendirme" Id="informationPasswordModal" />

<PageBase PageName="Şifre Değiştir">
    <Child>
        <h1 class="panel-title">Lütfen 6 haneli bir şifre giriniz.</h1>
        <br />
        <EditForm Model="@changeModel" OnValidSubmit="@ChangePassword">
            <DataAnnotationsValidator />
            <div class="row">
                <div class="col-5">
                    <a>Şifre</a>
                </div>
                <div class="col-5">
                    <InputText type="input" id="user" @bind-Value="@changeModel.Password" />
                    <ValidationMessage For="@(()=>changeModel.Password)" />
                </div>
            </div>
            <div class="row">
                <div class="col-5">
                    <a>Şifre Tekrar</a>
                </div>
                <div class="col-5">
                    <InputText type="input" id="phoneNumber" @bind-Value="@changeModel.PasswordAgain" />
                    <ValidationMessage For="@(()=>changeModel.PasswordAgain)" />
                </div>
            </div>
            <div class="row">
                <div class="col-5">
                </div>
                <div class="col-5">
                    <button type="submit">Devam</button>
                </div>
            </div>
        </EditForm>
    </Child>
</PageBase>




@code {
    [Parameter]
    public string CodeId { get; set; }
    [Parameter]
    public string CodeCustomerNumber { get; set; }
    PasswordChangeModel changeModel = new PasswordChangeModel();
    string validationMessage;

    async Task ChangePassword()
    {
        if (changeModel.Password == changeModel.PasswordAgain)
        {
            changeModel.CodeId = CodeId;
            changeModel.CodeCustomerNumber = CodeCustomerNumber;
            var result = await operation.Post<Result>("/Customer/PasswordChange", changeModel);
            if (result.ResultStatus)
                await _jSRuntime.InvokeVoidAsync("OpenModal", "#successPasswordModal");
            else if (result.ResultCode == 401)
            {
                validationMessage = result.ResultInnerMessage;
                await _jSRuntime.InvokeVoidAsync("OpenModal", "#informationPasswordModal");
            }
            else
            {
                validationMessage = result.ResultMessage;
                await _jSRuntime.InvokeVoidAsync("OpenModal", "#informationPasswordModal");
            }
        }
        else
        {
            validationMessage = "Girilen şifreler aynı değil.";
            await _jSRuntime.InvokeVoidAsync("OpenModal", "#informationPasswordModal");
        }
    }
}