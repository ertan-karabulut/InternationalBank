@layout LoginLayout
@page "/PasswordConfirm"
@inject IServiceOperations operation
@inject ILocalStorageService local
@inject NavigationManager navigation
@inject IJSRuntime _jSRuntime

<SuccessModalComponent Message="Şifreniz kayıtlı mail adresinize gönderilmiştir." Id="successPasswordModal" ApprovalOnPress=@(()=> navigation.NavigateTo("/")) />

<InformationModalComponent Message=@validationMessage Title="Bilgilendirme" Id="informationPasswordModal" />

<PageBase PageName="Parola Yenile / Al">
    <Child>
        <h1 class="panel-title">Lütfen Müşteri Numaranızı veya T.C. Kimlik Numaranızı ve bankamızda kayıtlı cep telefonu numaranızı girin.</h1>
        <br />
        <EditForm Model="@confirmModel" OnValidSubmit="@ConfirmPassword">
            <DataAnnotationsValidator />
            <div class="row">
                <div class="col-5">
                    <a>Müşteri / T.C. Kimlik Numarası</a>
                </div>
                <div class="col-5">
                    <InputText type="input" id="user" @bind-Value="@confirmModel.User" />
                    <ValidationMessage For="@(()=>confirmModel.User)" />
                </div>
            </div>
            <div class="row">
                <div class="col-5">
                    <a>Cep Telefonu Numarası</a>
                </div>
                <div class="col-5">
                    <InputText type="input" id="phoneNumber" @bind-Value="@confirmModel.PhoneNumber" />
                    <ValidationMessage For="@(()=>confirmModel.PhoneNumber)" />
                </div>
            </div>
            <div class="row">
                <div class="col-5">
                </div>
                <div class="col-5">
                    <button type="submit">Devam</button>
                </div>
            </div>
        </EditForm>
    </Child>
</PageBase>




@code {
    PasswordConfirmModel confirmModel = new PasswordConfirmModel();
    string validationMessage;

    async Task ConfirmPassword()
    {
        var result = await operation.Post<Result>("/Customer/PasswordConfirm", confirmModel);
        if (result.ResultStatus)
            await _jSRuntime.InvokeVoidAsync("OpenModal", "#successPasswordModal");
        else if (result.ResultCode == 401)
        {
            validationMessage = result.ResultInnerMessage;
            await _jSRuntime.InvokeVoidAsync("OpenModal", "#informationPasswordModal");
        }
        else
        {
            validationMessage = result.ResultMessage;
            await _jSRuntime.InvokeVoidAsync("OpenModal", "#informationPasswordModal");
        }
    }
}